TCP의 오류, 흐름, 혼잡 제어

  오류 제어: 재전송 기법
    오류 검출과 재전송
      체크섬은 세그먼트의 훼손 여부만 나타낼 뿐이고, 체크섬 값이 잘못되었다면 호스트는 해당 패킷을 읽지않고 
      폐기하기 때문에, 송신 호스트가 세그먼트 전송 과정에 문제가 있다는 것을 인지할 수 없다.
      그렇다면 가장 먼저 파악해야할 점은 TCP가 어떤 상황에서 송신한 세그먼트에 문제가 있음을 감지하느냐 이다.
      TCP가 오류를 검출하고 세그먼트를 재전송하는 상황에는 크게 두 가지가 있다.

      1. 중복된 ACK 세그먼트를 수신했을 때
        호스트 A, B가 올바르게 세그먼트를 주고받는 예로, A는 첫 순서 번호르 담은 세그먼트를 보내고,
        그에대한 ACK 세그먼트를 받은 뒤에 다음 순서 번호를 담은 세그먼트 보내는 방식을 반복할 것이다.
        이때 수신 호스트 측이 받은 세그먼트의 순서 번호 중에서 일부가 누락되었다면 중복된 ACK세그먼트를 전송하게 된다.
      2. 타임아웃이 발생했을 때
        TCP세그먼트를 송신하는 호스트는 모두 재전송 타이머라는 값을 유지한다.
        이 타이머의 카운트다운이 끝난 상황을 타임아웃이라고 한다.
        타임아웃이 되기 전까지 세그먼트를 받지 못하면 세그먼트가 상대 호스트에게 정상적으로 도착하지 않았다고 간주하여
        세그먼트를 재전송한다.
      
      ARQ: 재전송 기법
        문제가 생긴 메시지를 재전송함으로써 신뢰성을 확보하는 방식이다.

        대표적으로 세가지 방식이 있다.

        Stop-and-Wait ARQ
          가장 단순한 방식으로 제대로 전달했음을 확인하기 전까지는 새로운 메시지를 보내지 않는 방식이다.
          하지만 이 방식에는 네트워크 이용 효율이 낮아질 수 있다는 문제가 있다.
        GO-Back-N ARQ
          위 방식의 문제를 해결하려면 세그먼트가 도착하기 전이더라도 여러 세그먼트를 보낼 수 있어야한다.
          이렇게 연속해서 메시지를 전송할 수 있는 기술을 파이프라이닝 이라고 한다.
          이 방식은 여러 세그먼트를 전송하고 도중에 잘못 전송된 세그먼트가 발생될 경우 해당 세그먼트부터 전부 다시 전송하는 방식이다.
          이러한 점에서 이 방식은 누적확인응답이라고 한다.
        Selective Repeat ARQ
          선택적으로 재전송하는 방법이다.
          위 방식은 하나의 세그먼트만 문제가 생기더라도 해당 세그먼트부터 전체의 세그먼트를 다시 재전송 해야한다는 단점이 있다.
          그래서 이 방식으로 해결할 수 있는데 이를 개별 확인 응답이라고 한다.
  
  흐름 제어: 슬라이딩 윈도우
    파이프라이닝 기반의 Go-Back-N ARQ, Selective Repeat ARQ가 정상적으로 동작하려면 반드시 흐름제어를 고려해야한다.

    수신 버퍼: 수신된 세그먼트가 애플리케이션 프로세스에 의해 읽히기 전에 임시로 저장되는 공간이다.            
    수신 버퍼의 크기보다 많은 데이터를 전송하면 일부 세그먼트가 처리되지 못할 수 있는데, 이를 버퍼 오버플로 라고 한다.

    TCP의 흐름제어란 이러한 문제를 방지하고자 송신 호스트가 수신 호스트의 처리속도를 고려하며 송수신 속도를 균일하게 유지하는 것을 의미한다.
    파이프라이닝이 연속해서 세그먼트를 전송할 수 있는 기술이긴 하지만 무한한 데이터를 연속해서 보낼수는 없기 때문에
    슬라이딩 윈도우를 사용한다.

    윈도우
      송신 호스트가 파이프라이닝할 수 있는 최대량을 의미한다.
    
    파이프라이닝 과정엣서 송수신 윈도우는 점차 오른쪽으로 미끄러지듯 움직이게 되는데, 이를 영어로 표현해서 슬라이딩 윈도우라고 부른다.
  
  혼잡 제어
    많은 트래픽으로 인해 패킷의 처리 속도가 늦어지거나 유실될 우려가 있는 네트워크 상황을 제어하기 위함.
    흐름제어의 주체가 수신호스트라면, 혼잡 제어의 주체는 송신호스트 이다.

    송신호스트는 네트워크의 혼잡도를 판단하고 혼잡한 정도에 맞춰 유동적으로 전송량을 조절하며 전송한다.

    혼잡 윈도우
      혼잡없이 전송할 수 있을 법한 데이터의 양을 의미한다.
      혼잡 윈도우의 크기는 송신 호스트가 어느정도의 세그먼트를 전송해야 혼잡을 방지할 수 있는지를 직접 계산해야 하는데,
      이는 혼잡 제어 알고리즘을 통해 결정할 수 있다.

      가장 기본적인 알고리즘인 AIMD는 합으로 증가 곱으로 감소라는 의미이다.
      혼잡이 감지되지 않으면 혼잡 윈도우를 RTT마다 1씩 선형적으로 증가시키고, 혼잡이 감지되면
      혼잡 윈도우를 절반으로 떨어트리는 동작을 반복하는 알고리즘이다.

      1. 느린시작 알고리즘
        윈도우를 1부터 시작해 문제없이 수신된 ACK세그먼트 하나당 1씩 증가시키는 방식이다.
        혼잡윈도우의 지수적인 증가를 활용해 초기 전송 속도를 어느정도 빠르게 확보할 수 있다.
        하지만 지수적으로 증가시킬수는 없기 때문에, 느린시작 알고리즘과 함께 사용하는 느린시작 임계치라는 값이 정해져있다.
        값이 계속 증가하다가 느린시작 임계치 이상이 되거나 타임아웃이 발생하거나, 세번의 중복된 ACK세그먼트가 발생하여
        혼잡이 감지된다면 다음 세가지 방법 중 하나를 선택하게 된다
        1. 타임아웃 발생 -> 윈도두의 값을 절반으로 초기화한 뒤 느린시작 재개
        2. 혼잡윈도우>=느린시작임계치 -> 느린시작 종료, 혼잡윈도우를 절반으로 한뒤 혼잡 회피 수행
        3. 세번의 중복 ACK발생 -> 빠른 재전송 후 빠른 회복 수행
      
      2. 혼잡 회피 알고리즘
        RTT마다 혼잡 윈도우를 1MSS씩 증가시키는 알고리즘이다.
        느린 시작 임계치를 넘어선 시점부터는 혼잡이 발생할 우려가 있으니 조심해서 혼잡 윈도우를 증가시키는 방식이라고 보면 된다.
      
      3. 빠른회복 알고리즘
        느린시작은 건너뛰고 혼잡회피를 수행하는 알고리즘으로, 빠르게 전송률을 회복하기 위한 알고리즘이다.
        빠른 회복 도중이라도 타임아웃이 발생하면 혼잡 윈도우 크기는 1로, 느린시작 임계치는 혼잡이 감지된 시점의 절반으로 떨어뜨린 후 다시 느린 시작을 수행한다.

  ECN: 명시적 혼잡 알림
    최근 혼잡을 회피하기 위해 네트워크 중간장치(주로 라우터)의 도움을 받는 방법이 생겼는데, 이를 명시적 혼잡 알림이라고 한다.
    선택적인 기능이기에, 이를 지원하는 호스트가 있고, 지원하지 않는 호스트가 있다.

    ECN을 통한 혼잡 제어의 대략적인 동작으로는,
    혼잡회피는 라우터를 기준으로 시작된다.
    1. 호스트 A가 호스트 B에게 메시지를 전송하기 위해 라우터에게 메시지를 보낸다.
    2. 네트워크가 혼잡해질 것 같다고 판단한 경우 IP헤더의 ECN비트들을 설정한 채 수신지 호스트 B에게 메시지를 전달한다.
    3. 호스트 B가 받은 IP패킷 내에 혼잡표시가 되어있다면, ECE비트세팅을 통해 송신 호스트에게 네트워크가 혼잡함을 알려준다.
    4. 송신 호스트가 응답받은 세그먼트에 ECE비트가 설정되어있을 경우, 송신 호스트는 CWR비트를 세팅 후 혼잡윈도우를 반으로 줄인다.
  
