HTTP
    사용자와 밀접하게 맞닿아 있는 프로토콜

    중요한 네가지 특성
    1. 요청과 응답을 기반으로 동작한다.
        HTTP는 클라이언트와 서버가 서로 HTTP요청 메시지와 HTTP응답 메시지를 주고받는 구조로 동작한다.
    
    2. 미디어 독립적이다
        HTTP는 주고받을 자원의 특성과 무관하게 그저 자원을 주고받을 수단의 역할만을 사행한다.
        HTTP에서 메시지로 주고받는 자원의 종류를 미디어(MIME) 타입이라고 부른다.
        즉, HTTP는 주고받을 미디어 타입에 특별히 제한을 두지 않고 독립적으로 동작이 가능한 미디어 독립적인 프로토콜이다.

        미디어 타입은 기본적으로 슬래시를 기준으로 하는 타입/서브타입 형식으로 구성된다.
        타입은 데이터의 유형을 나타내고 서브타입은 주어진 타입에 대한 세부 유형을 나타낸다.

    3. 상태를 유지하지 않는다.
        HTTP는 상태를 유지하지 않는 스테이트리스 프로토콜이다. 이는 서버가 HTTP요청을 보낸 클라이언트와 관련된 상태를 기억하지 않는다는 의미이다.
        HTTP서버는 일반적으로 많은 클라이언트와 동시에 상호작용한다. 동시에 처리해야할 요청 메시지의 수가 기하급수적으로 많아지면 클라이언트의 상태정보를 유지하는 것은 서버에 큰 부담이다.

        HTTP의 중요한 설계 목표는 확장성과 견고성이다. 상태를 유지하지 않고 모든 요청을 독립적인 요청으로 처리하는 것은
        특정 클라이언트가 특정 서버에 종속되지 않도록 하며, 서버의 추가나 문제 발생 시 대처가 용이하도록한다.
        즉, 상태를 유지하지 않는 스테이트리스한 특성이 필요하다면 언제든 쉽게 서버를 추가할 수 있기 때문에 확장성이 높고,
        서버 중 하나에 문제가 생겨도 다른 서버로 대체가 가능하기 때문에 견고성이 높다.

    4. 지속 연결을 지원한다.
        하나의 TCP 연결상에서 여러개의 요청-응답을 주고받을 수 있는 기술이다.
        지속 연결 기능을 지원하는 HTTP는 매번 새롭게 연결을 수립하고 종료해야하는 비지속 연결에 비해 더 빠르게 여러 HTTP요청과 응답을 처리할 수 있다.

    HTTP 메시지 구조

        시작 라인
            HTTP메시지가 요청메시지일 경우 시작 라인은 요청 라인이 되고, 응답 메시지일 경우 시작 라인은 상태 라인이 된다.
        
        요청 라인  
            메서드, 요청 대상, HTTP버전은 모두 공백으로 구분된다.
        
        메서드
            클라이언트가 서버의 자원에 대해 수행할 작업의 종류를 나타낸다. (GET, POST, PUT, DELETE)
        
        요청 대상
            요청을 보낼 서버의 자원을 의미한다. 이곳에는 쿼리가 포함된 URI의 경로가 명시된다.
        
        HTTP버전
        
        상태 코드
            요청에 대한 결과를 나타내는 세자리 정수이다.

        이유 구문
            상태 코드에 대한 문자열 형태의 설명을 의미한다.
            HTTP/1.1 200 OK
            HTTP/1.1 404 Not Found
        
        필드 라인
            필드 라인에는 0개 이상의 HTTP 헤더가 명시된다. 그래서 이를 헤더 라인이라고도 부른다.
    
    HTTP 메서드
        GET - 자원을 습득하기 위한 메서드
            특정 자원을 조회할 때 사용되는 메서드이다.
            GET 요청 메시지가 성공적으로 처리되었다면, 이에대한 응답으로서 요청한 자원을 전달받게 된다.

        HEAD - GET과 동일하나 헤더만을 응답받는 메서드
            응답 메시지에 메시지 본문이 포함되지 않는다.

        POST - 서버로 하여금 특정 작업을 처리하게끔 하는 메서드
            대체적으로 클라이언트가 서버에 새로운 자원을 생성하고자 할 때 사용된다.
            자원이 생성되면 서버는 응답 메시지의 Location 헤더를 통해 새로 생성된 자원의 위치를 클라이언트에게 알려 줄 수 있다.

        PUT - 자원을 대체하기 위한 메서드
            덮어쓰기를 요청하는 메서드이다. 요청 자원이 없다면 메시지 본문으로 새롭게 자원을 생성하거나,
            이미 자원이 존재한다면 메시지 본문으로 자원을 완전히 대체하는 메서드이다.

        PATCH - 자원에 대한 부분적 수정을 위한 메서드
            부분적 수정에 가까운 메서드이다.

        DELETE - 자원을 삭제하기 위한 메서드
        CONNECT - 자원에 대한 양방향 연결을 시작하는 메서드
        OPTIONS - 사용 가능한 메서드 등 통신 옵션을 확인하는 메서드
        TRACE - 자원에 대한 루프백 테스트를 수행하는 메서드
    
    HTTP 상태 코드

        100번대(100~199) : 정보성 상태 코드
        200번대(200~299) : 성공 상태 코드
            200OK : 요청이 성공했음
            201Create : 요청이 성공했으며, 새로운 자원이 생성되었음
            202Accepted : 요청을 잘 받았으나, 아직 요청한 작업을 끝내지 않았음
                작업시간이 긴 대용량 파일 업로드 작업이나 배치 작업과 같이 요청 결과를 곧바로 응답하기 어려운 상황에 사용된다.
            204No Content : 요청이 성공했지만, 메시지 본문으로 표시할 데이터가 없음
        300번대(300~399) : 리다이렉션 상태 코드
            클라이언트가 요청한 자원이 다른곳에 있을 때, 클라이언트의 요청을 다른곳으로 이동시키는 것을 리다이렉션 이라고 한다.
            301 Moved Permanently : 영구적 리다이렉션; 재요청 메서드 변경될 수 있음
            302 Found : 일시적 리다이렉션; 재요청 메서드 변경될 수 있음
            303 See Other : 일시적 리다이렉션; 재요청 메서드 GET으로 변경
            307 Temporary Redirect : 일시적 리다이렉션; 재요청 메서드 변경되지 않음
            308 Permanent Redirect : 영구적 리다이렉션; 재요청 메서드 변경되지 않음
        400번대(400~499) : 클라이언트 에러 상태 코드
            400 Bad Request : 클라이언트의 요청이 잘못되었음
            401 Unauthorized : 요청한 자원에 대한 유효한 인증이 없음
            403 Forbidden : 요청이 서버에 의해 거부됨
            404 Not Found : 요청받은 자원을 찾을 수 없음
            405 Method Not Allowed : 요청한 메서드를 지원하지 않ㅇ름
        500번대(500~599) : 서버 에러 상태 코드
            500 Internal Server Error : 요청을 처리할 수 없음
            501 Bad Gateway : 중간 서버의 통신 오류
            503 Service Unavailable : 현재는 요청을 처리할 수 없으나 추후 가능할 수도 있음

    HTTP0.9 ~ 3.0

    HTTP/0.9
        사용 가능한 메서드가 GET 뿐이었고 요청 메시지는 한줄로 구성되어 있었다.

    HTTP/1.0
        HEAD, POST와 같은 메서드가 도입되었고, 헤더가 지원되기 시작해 훨씬 더 다양한 정보를 주고받을 수 있게 되었지만,
        여전히 공식적으로는 지속 연결을 지원하지 않았다.
    
    HTTP/1.1
        지속 연결이 공식적으로 지원되었고, 특정 요청에 대한 응답이 수신되기 전에 다음 요청을 보낼 수 있는 파이프라이닝 기능과 다음 절에서 학습할 콘텐츠 협상 기능 등
        다양한 편의 기능 및 사용 가능한 헤더가 추가되었다.
    
    HTTP/2.0
        효율과 성능을 높이기 위한 버전이다.
        송수신 효율을 높이기 위해 헤더를 압축하여 전송하고, 바이너리 데이터 기반의 메시지를 송수신한다.
        클라이언트가 요청하지 않았더라도 미래에 필요할 것으로 예상되는 자원을 미리 전송해주는 서버 푸시라는 기능을 제공하기도 한다.
    
    HTTP/3.0
        UDP를 기반으로 동작한다.