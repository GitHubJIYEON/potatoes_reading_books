HTTP 헤더와 HTTP 기반 기술

    HTTP 헤더
        요청 시 활용되는 HTTP 헤더
            1. Host
                요청을 보낼 호스트를 나타내는 헤더이다.
                주로 도메인 네임으로 명시되며, 포트 번호가 포함되어 있을 수있다.
            2. User-Agent
                웹 브라우저와 같이 HTTP 요청을 시작하는 클라이언트 측의 프로그램을 의미한다.
            3. Referer
                클라이언트가 요청을 보낼 때 머무르고 있던 URL이 명시된다.
            4. Authorization
                클라이언트의 인증 정보를 담는 헤더이다. 인증 타입에 따라 인증 정보에 명시될 값이 달라진다.
        
        응답 시 활용되는 HTTP 헤더
            1. Server
                요청을 처리하는 서버 측의 소프트웨어와 관련된 정보를 명시한다.
            2. Allow
                클라이언트에게 허용된 HTTP 메서드 목록을 알려주기 위해 사용된다.
            3. Retry-After
                자원을 사용할 수 있는 날짜 혹은 시각을 나타낸다.
            4. Location
                클라이언트에게 자원의 위치를 알려주기 위해 사용되는 헤더이고, 주로 리다이렉션이 발생했을 때나 새로운 자원이 생성되었을 때 사용된다.
            5. WWW-Authenticate
                자원에 접근하기 위한 인증 방식을 설명하는 헤더이다.
            
            Authorization과 WWW-Authenticate헤더를 통해 인증되지 않은 클라이언트가 HTTP 인증을 수행하는 과정
                1. 인증되지 않은 클라이언트가 서버에 GET요청 메시지를 전송한다.
                2. 서버는 클라이언트에게 상태코드와 함께 WWW-Authenticate 헤더를 통해 인증방식을 알린다.
                3. 클라이언트는 사용자로부터 인증정보를 받는다.
                4. 사용자아이디:비밀번호를 Base64 인코딩한 값을 인증정보로 삼은 Authorization 헤더를 통해 다시 GET 요청 메시지를 전송한다.
                5. 서버는 인증 정보를 확인한다.
                6. 인증이 유효하면 상태코드 200으로 응답하고, 인증되지 않았으면 상태코드 401로 응답한다.
        
        요청과 응답 모두에서 활용되는 HTTP 헤더
            1. Date
                메시지가 생성된 날짜와 시각에 관련된 정보를 담은 헤더이다.
            2. Connection
                클라이언트의 요청과 응답간의 연결 방식을 설정하는 헤더이다.
            3. Content-Length
                본문의 바이트 단위 크기를 나타낸다.
            4. Content-Type, Content-Language, Content-Encoding
                전송하려는 메시지 본문의 표현 방식을 설명하는 헤더이고, 표현 헤더의 일종이라고 부른다.
                Content-Type
                    메시지 본문에서 사용된 미디어 타입을 담고 있다.
                Content-Language
                    메시지 본문에서 사용된 자연어를 명시한다.
                Content-Encoding
                    메시지 본문을 압축하거나 변환한 방식이 명시된다.

        캐시
            불필요한 대역폭 낭비와 응답 지연을 방지하기 위해 정보의 사본을 임시로 저장하는 기술이다.
            사본을 임시로 저장해 두면 동일한 요청에 대해 캐시된 데이터를 활용할 수 있기 때문에 불필요한 대역폭 낭비를 줄일 수 있고, 더빠르게 데이터에 접근이 가능하다.

            개인 전용 캐시(웹 브라우저에 저장되어 있음)
                캐시된 사본 데이터가 얼마나 최신 원본 데이터와 유사한지를 캐시 신선도라고 표현하기도한다.
                신선도를 유지하는 가장 기본적인 방법은 캐시된 데이터에 유효기간을 설정하는 방법이다.
                유효기간이 만료되면 원본 데이터를 다시 요청하는 방식으로 캐시 신선도를 유지할 수 있다.
                만약 캐시의 유효기간이 만료되었더라도 원본 데이터가 변하지 않았다면 서버는 굳이 같은 자원을 전송해 줄 필요가 없다.

                캐시의 신선도를 재검사하는 방법은 날짜를 기반으로 서버에게 물어보는 방법과 엔티티 태그를 기반으로 서버에 물어보는 방법이 있다.

                날짜를 기반으로 재검사하는 방식
                    If-Modified-Since 헤더를 통해 서버에게 특정 시점 이후로 원본 데이터에 변경이 있었는지 물어볼 수 있다.

                    이 헤더가 포함된 요청메시지를 수신하면 서버에서는 크게 세가지 중 하나의 상황을 따른다.
                        1. 요청받은 자원이 변경되었음
                            서버는 상태코드 200과 함께 새로운 자원을 반환한다.
                        2. 요청받은 자원이 변경되지 않았음
                            상태코드 304를 통해 클라이언트에게 자원이 변경되지 않았음을 알린다.
                            이 경우 클라이언트는 캐시된 자원을 사용할 수 있다.
                        3. 요청받은 자원이 삭제되었음
                            상태코드 404를 통해 요청한 자원이 존재하지 않음을 알린다.
                
                엔티티 태그(Etag)를 사용하는 방식
                    Etag는 자원의 버전을 식별하기 위한 정보이다.
                    자원이 변경될 때 마다 자원의 버전을 식별하는 Etag값이 변경된다.

                    캐시 신선도를 검사하기 위해 If-None-Match 헤더를 통해 물어볼 수있다.
                    이 헤더에 대한 요청메시지를 수신한 서버는 위의 세가지 상황과 같은 응답을 보낸다.
            공용 캐시(클라이언트와 서버 사이에 위치한 중간 서버에 저장되어 있음)
        
        쿠키
            서버에서 생성되어 클라이언트 측에 저장되는 데이터로 상태를 유지하지 않는 HTTP의 특성을 보완하기 위한 수단이다.

            요청 메시지의 Cookie 헤더 값은 서버에 전달할 쿠키의 이름과 값을 나타내는 헤더이고, 여러 개의 쿠키 값을 서버에 전달해야할 때는
            세미콜론을 사용하여 여러 쿠키의 이름-값을 나타낼 수 있다.

            쿠키는 브라우저에서 저장되고 관리된다.

            같은 도메인이라도 경로별로 쿠키를 구분하여 사용하고 싶다면, path로 쿠키가 적용된 경로를 명시하면 된다.
            Expires/Max-Age로 쿠키의 유효시간을 부여해 쿠키가 만료되는 시점을 표기할 수 있고, 해당 시간이 만료되었다면 서버에 전송되지 않는다.

            쿠키의 한계
                쿠키는 쉽게 노출되거나 조작될 수 있기에 개인정보를 비롯해 보안에 민감한 정보를 담아 송수신하고 저장하는 것은 바람직하지 않다.
                이를 보완하기 위한 속성으로 Secure와 HttpOnly라는 속성이 있다.
        
        콘텐츠 협상과 표현
            콘텐츠 협상
                같은 URI에 대해 가장 적합한 자원의 형태를 제공하는 메커니즘을 의미한다.
                같은 HTML문서라 해도, 한국어로 요청하면 한국어로 된 형태, 영어로 요청하면 영어로 된 형태로 제공한다.

                이때 송수신 가능한 자원의 형태를 자원의 표현이라고 한다.